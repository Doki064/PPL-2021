@startuml
title Abstract Syntax Tree Class Diagram
abstract class  _AST {
    + {static} nodeCount
    # _kids: list[_AST]
    # _label: abstract
    # _nodeNum: int
    + __init__(): _AST
    + getKid(idx: int): _AST
    + getKids(): list[_AST]
    + kidCount(): int
    + addKid(kidAST: _AST)
    + setLabel(label: str)
    + getLabel(): str
    + getNodeNum(): int
    + getContent(): str
}
class ProgramTree
class BlockTree
class DeclrTree
class FuncDeclTree
class FuncHeadTree
class TypeTree {
    + setType(typ)
    + getType()
    + setArray()
    + isArray(): bool
}
class IdTree
class NumberTree {
    + getValue(): str
}
class StringTree {
    + getValue(): str
}
class AssignTree {
    + getToken(): Token
}
class IfTree
class WhileTree
class ReturnTree
class CallTree
class RelOpTree {
    + getToken(): Token
}
class AddOpTree {
    + getToken(): Token
}
class MultOpTree {
    + getToken(): Token
}

_AST <|-- ProgramTree
_AST <|-- BlockTree
_AST <|-- DeclrTree
_AST <|-- FuncDeclTree
_AST <|-- FuncHeadTree
_AST <|-- TypeTree
_AST <|-- IdTree
_AST <|-- NumberTree
_AST <|-- StringTree
_AST <|-- AssignTree
_AST <|-- IfTree
_AST <|-- WhileTree
_AST <|-- ReturnTree
_AST <|-- CallTree
_AST <|-- RelOpTree
_AST <|-- AddOpTree
_AST <|-- MultOpTree
@enduml